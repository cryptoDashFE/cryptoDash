{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rrand\\\\School\\\\cryptoDash\\\\starterReactFiles\\\\src\\\\SmChart.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport './index.css';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst genData = () => {\n  let currUrl = 'https://restcountries.eu/rest/v2/name/aruba?fullText=true';\n\n  async function getInfo(url) {\n    let response = await fetch(url);\n\n    if (response.status === 200) {\n      let json = await response.json();\n      let obj = json[0].name;\n      return obj;\n    }\n  }\n\n  const getData = async () => {\n    const a = await getInfo(currUrl);\n    console.log(a);\n    return {\n      labels: ['1', '2', '3'],\n      datasets: [{\n        label: data,\n        data: [data.population, data.population, data.population],\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)'\n      }]\n    };\n  };\n\n  return getData();\n};\n\nconst options = {\n  scales: {\n    yAxes: [{\n      ticks: {\n        beginAtZero: true\n      }\n    }]\n  }\n};\n\nfunction SmChart() {\n  _s();\n\n  const [loading, setLoading] = React.useState(true);\n  const [items, setItems] = React.useState([]);\n  const [value, setValue] = React.useState();\n  const [chart, setChart] = React.useState(genData());\n  React.useEffect(() => {\n    let unmounted = false;\n\n    async function getCurrencies() {\n      const response = await fetch(\"https://restcountries.eu/rest/v2/all\");\n      const body = await response.json();\n\n      if (!unmounted) {\n        setItems(body.map(({\n          name\n        }) => ({\n          label: name,\n          value: name\n        })));\n        setLoading(false);\n      }\n    }\n\n    getCurrencies();\n    setChart(genData());\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chart,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      disabled: loading,\n      value: value,\n      onChange: e => setValue(e.currentTarget.value),\n      children: items.map(({\n        label,\n        value\n      }) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: value,\n        children: label\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SmChart, \"h4RAuRTvRQ6MjOgeV7TtD8mbVgs=\");\n\n_c = SmChart;\nexport default SmChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmChart\");","map":{"version":3,"sources":["C:/Users/rrand/School/cryptoDash/starterReactFiles/src/SmChart.js"],"names":["React","Line","genData","currUrl","getInfo","url","response","fetch","status","json","obj","name","getData","a","console","log","labels","datasets","label","data","population","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","SmChart","loading","setLoading","useState","items","setItems","value","setValue","chart","setChart","useEffect","unmounted","getCurrencies","body","map","e","currentTarget"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport './index.css';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst genData = () => {\r\n  let currUrl = 'https://restcountries.eu/rest/v2/name/aruba?fullText=true';\r\n  async function getInfo(url) {\r\n    let response = await fetch(url);\r\n    if (response.status === 200) {\r\n    let json = await response.json();\r\n    let obj = json[0].name;\r\n    return obj;\r\n    }\r\n  }\r\n  const getData = async () => {\r\n    const a = await getInfo(currUrl);\r\n    console.log(a);\r\n  return(\r\n  {\r\n  labels: ['1', '2', '3'],\r\n  datasets: [\r\n    {\r\n      label: data,\r\n      data: [data.population, data.population, data.population],\r\n      fill: false,\r\n      backgroundColor: 'rgb(255, 99, 132)',\r\n      borderColor: 'rgba(255, 99, 132, 0.2)',\r\n    },\r\n  ],\r\n})\r\n}\r\nreturn getData();\r\n};\r\n\r\n\r\nconst options = {\r\n  scales: {\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          beginAtZero: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n\r\nfunction SmChart() {\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [items, setItems] = React.useState([]);\r\n  const [value, setValue] = React.useState();\r\n  const [chart, setChart] = React.useState(genData());\r\n\r\n  React.useEffect(() => {\r\n    let unmounted = false;\r\n    async function getCurrencies() {\r\n      const response = await fetch(\r\n        \"https://restcountries.eu/rest/v2/all\"\r\n      );\r\n      const body = await response.json();\r\n      if (!unmounted) {\r\n        setItems(\r\n          body.map(({ name }) => ({ label: name, value: name }))\r\n        );\r\n        setLoading(false);\r\n      }\r\n    }\r\n    getCurrencies();\r\n    setChart(genData());\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>{value}</p>\r\n      <Line data={chart} options={options} />\r\n    <select\r\n      disabled={loading}\r\n      value={value}\r\n      onChange={(e) => setValue(e.currentTarget.value)}\r\n    >\r\n      {items.map(({ label, value }) => (\r\n        <option key={value} value={value}>\r\n          {label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SmChart;"]},"metadata":{},"sourceType":"module"}