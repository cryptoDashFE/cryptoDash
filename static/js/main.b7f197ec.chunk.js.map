{"version":3,"sources":["components/Pricechart.js","formatWeekData.js","formatMonthData.js","ThreeMonthformat.js","OneDayFormat.js","SixMonthFormat.js","DateISOConverter.js","App.js","index.js"],"names":["Pricechart","price","data","className","options","animation","duration","tooltips","intersect","mode","responsive","maintainAspectRatio","formatWeekData","chartNum","finalData","labels","datasets","label","backgroundColor","borderColor","fill","dates","Array","from","map","val","ts","date","Date","day","getDate","month","getMonth","year","getFullYear","priceArr","weekDates","i","sevArr","length","toFixed","reverse","formatMonthData","monthArr","ThreeMonthformat","threemonthArr","intervalTime","j","OneDayFormat","hms","hour","getHours","minute","getMinutes","second","getSeconds","oneDayHMS","dayArr","SixMonthFormat","sixMonthDates","sixMonthArr","DateISOConverter","prevMonth","toISOString","currDate","m","setMonth","setDate","setHours","unixtstart","preMonth","console","log","App","useState","time","setTime","chartLg","setChartLg","currencies","setcurrencies","pair1","setpair1","price1","setprice1","pastData1","setpastData1","pair2","setpair2","price2","setprice2","pastData2","setpastData2","pair3","setpair3","price3","setprice3","pastData3","setpastData3","ws1","useRef","ws2","ws3","first","url","useEffect","current","WebSocket","pairs","a","fetch","then","res","json","filtered","filter","pair","quote_currency","sort","b","base_currency","apiCall","historicalDataURL","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","stop","start","dataArr","formattedData","fetchHistoricalData1","onmessage","e","parse","product_id","fetchHistoricalData2","fetchHistoricalData3","array1","array2","array3","src","alt","height","width","id","onClick","name","value","onChange","unsubMsg","unsub","target","cur","idx","display_name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7f197ec.chunk.js","sourcesContent":["import { Line } from \"react-chartjs-2\";\n\nfunction Pricechart({ price, data }) {\n  \n  const opts = {\n    animation: {\n      duration: 0\n    },\n    tooltips: {\n      intersect: false,\n      mode: \"index\",\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n  };\n  return (\n    <div className=\"dashboard\">\n      <h2>{`$${price}`}</h2>\n\n      <div className=\"chart-item\">\n        <Line data={data} options={opts} />\n      </div>\n    </div>\n  );\n}\n\nexport default Pricechart;\n","// Format one week data\nexport const formatWeekData = (data, chartNum) => {\n  let finalData;\n  if (chartNum === 1) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(57, 255, 20)\",\n        borderColor: \"rgba(57, 255, 20, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse if (chartNum === 2) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(255, 163, 67)\",\n        borderColor: \"rgba(255, 163, 67, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(254, 65, 100)\",\n        borderColor:  \"rgba(254, 65, 100, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}  \n\n  data = Array.from(data);\n  let dates = data.map((val) => {\n    // [0, 1, 2, 3, 4, 5]\n    // [ time, low, high, open, close, volume ],\n    // [ 1415398768, 0.32, 4.2, 0.35, 4.2, 12.3 ]\n    // Here time is in unix timestamp\n    // Convert time from unix to current date.\n    const ts = val[0];\n    let date = new Date(ts * 1000);\n    let day = date.getDate() + 1;\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n\n    let final = `${month}-${day}-${year}`;\n\n    return final;\n  });\n\n  // Process all the data\n  // const priceArr = \"\";\n  let priceArr = data.map((val) => {\n    return val[4];\n  });\n\n  // Only keep a week dates\n  let weekDates = [];\n  for (let i = 0; i < 7; i++) {\n    weekDates[i] = dates[i];\n  }\n\n  // Only keep prices of seven days\n  const sevArr = [];\n  if (priceArr.length >= 7) {\n    for (let i = 0; i < 7; i++) {\n      sevArr[i] = priceArr[i].toFixed(2);\n    }\n  }\n\n  sevArr.reverse();\n  weekDates.reverse();\n  finalData.labels = weekDates;\n  finalData.datasets[0].data = sevArr;\n  return finalData;\n};\n","// Format one week data\nexport const formatMonthData = (data, chartNum) => {\n  let finalData;\n  if (chartNum === 1) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(57, 255, 20)\",\n        borderColor: \"rgba(57, 255, 20, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse if (chartNum === 2) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(255, 163, 67)\",\n        borderColor: \"rgba(255, 163, 67, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(254, 65, 100)\",\n        borderColor:  \"rgba(254, 65, 100, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}  \n\n  data = Array.from(data);\n  let dates = data.map((val) => {\n    // [0, 1, 2, 3, 4, 5]\n    // [ time, low, high, open, close, volume ],\n    // [ 1415398768, 0.32, 4.2, 0.35, 4.2, 12.3 ]\n    // Here time is in unix timestamp\n    // Convert time from unix to current date.\n    const ts = val[0];\n    let date = new Date(ts * 1000);\n    let day = date.getDate() + 1;\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n\n    let final = `${month}-${day}-${year}`;\n\n    return final;\n  });\n\n  // Process all the data\n  let priceArr = data.map((val) => {\n    return val[4];\n  });\n\n  // Only keep a week dates\n  let weekDates = [];\n  for (let i = 0; i < 31; i++) {\n    weekDates[i] = dates[i];\n  }\n\n  // Only keep prices of seven days\n  let monthArr = [];\n  if (priceArr.length >= 31) {\n    for (let i = 0; i < 31; i++) {\n      monthArr[i] = priceArr[i].toFixed(2);\n    }\n  }\n\n  monthArr.reverse();\n  weekDates.reverse();\n  finalData.labels = weekDates;\n  finalData.datasets[0].data = monthArr;\n  return finalData;\n};\n","// Format one week data\nexport const ThreeMonthformat = (data, chartNum) => {\n  let finalData;\n  if (chartNum === 1) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(57, 255, 20)\",\n        borderColor: \"rgba(57, 255, 20, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse if (chartNum === 2) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(255, 163, 67)\",\n        borderColor: \"rgba(255, 163, 67, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(254, 65, 100)\",\n        borderColor:  \"rgba(254, 65, 100, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}  \n\n  data = Array.from(data);\n  let dates = data.map((val) => {\n    // [0, 1, 2, 3, 4, 5]\n    // [ time, low, high, open, close, volume ],\n    // [ 1415398768, 0.32, 4.2, 0.35, 4.2, 12.3 ]\n    // Here time is in unix timestamp\n    // Convert time from unix to current date.\n    const ts = val[0];\n    let date = new Date(ts * 1000);\n    let day = date.getDate() + 1;\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n\n    let final = `${month}-${day}-${year}`;\n\n    return final;\n  });\n\n  // Process all the data\n  let priceArr = data.map((val) => {\n    return val[4];\n  });\n\n  // Only keep prices of 90 days range with 10 days interval\n  let weekDates = [];\n  let threemonthArr = [];\n  let intervalTime = 10;\n  if (priceArr.length >= 90) {\n    for (let i = 0, j = 0; i < 90; i = i + 10, j++) {\n      weekDates[j] = dates[i];\n      threemonthArr[j] = priceArr[i].toFixed(2);\n      intervalTime--;\n      if (intervalTime === 0) {\n        intervalTime = 10;\n      }\n    }\n  }\n\n  threemonthArr.reverse();\n  weekDates.reverse();\n  finalData.labels = weekDates;\n  finalData.datasets[0].data = threemonthArr;\n  return finalData;\n};\n","// Format one week data\nexport const OneDayFormat = (data, chartNum) => {\n  let finalData;\n  if (chartNum === 1) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(57, 255, 20)\",\n        borderColor: \"rgba(57, 255, 20, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse if (chartNum === 2) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(255, 163, 67)\",\n        borderColor: \"rgba(255, 163, 67, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(254, 65, 100)\",\n        borderColor:  \"rgba(254, 65, 100, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}  \n\n  data = Array.from(data);\n  let hms = data.map((val) => {\n    // [0, 1, 2, 3, 4, 5]\n    // [ time, low, high, open, close, volume ],\n    // [ 1415398768, 0.32, 4.2, 0.35, 4.2, 12.3 ]\n    // Here time is in unix timestamp\n    // Convert time from unix to current date.\n    const ts = val[0];\n    let date = new Date(ts * 1000);\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    let hour = date.getHours();\n    let minute = date.getMinutes();\n    let second = date.getSeconds();\n\n    let final = `${day}-${month}-${year} ${hour}:${minute}:${second}`;\n\n    return final;\n  });\n\n  // Process all the data\n  let priceArr = data.map((val) => {\n    return val[4];\n  });\n\n  // Only save last 24 hours data\n  let oneDayHMS = [];\n  for (let i = 0; i < 24; i++) {\n    oneDayHMS[i] = hms[i];\n  }\n\n  // Only keep prices of seven days\n  let dayArr = [];\n  if (priceArr.length >= 24) {\n    for (let i = 0; i < 24; i++) {\n      dayArr[i] = priceArr[i].toFixed(2);\n    }\n  }\n\n  dayArr.reverse();\n  oneDayHMS.reverse();\n  finalData.labels = oneDayHMS;\n  finalData.datasets[0].data = dayArr;\n  return finalData;\n};\n","// Format six month data\nexport const SixMonthFormat = (data, chartNum) => {\n  let finalData;\n  if (chartNum === 1) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(57, 255, 20)\",\n        borderColor: \"rgba(57, 255, 20, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse if (chartNum === 2) {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(255, 163, 67)\",\n        borderColor: \"rgba(255, 163, 67, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}\nelse {\n  finalData = {\n    labels: [],\n    datasets: [\n      {\n        label: \"Price\",\n        data: [],\n        backgroundColor: \"rgb(254, 65, 100)\",\n        borderColor:  \"rgba(254, 65, 100, 0.2)\",\n        fill: false,\n      },\n    ],\n  };\n}  \n\n  data = Array.from(data);\n  let dates = data.map((val) => {\n    // [0, 1, 2, 3, 4, 5]\n    // [ time, low, high, open, close, volume ],\n    // [ 1415398768, 0.32, 4.2, 0.35, 4.2, 12.3 ]\n    // Here time is in unix timestamp\n    // Convert time from unix to current date.\n    const ts = val[0];\n    let date = new Date(ts * 1000);\n    let day = date.getDate() + 1;\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n\n    let final = `${month}-${day}-${year}`;\n\n    return final;\n  });\n\n  // Process all the data\n  let priceArr = data.map((val) => {\n    return val[4];\n  });\n\n  // Only keep prices of 180 days range with 14 days interval\n  let sixMonthDates = [];\n  let sixMonthArr = [];\n  let intervalTime = 14;\n  if (priceArr.length >= 180) {\n    for (let i = 0, j = 0; i < 180; i = i + intervalTime, j++) {\n      sixMonthDates[j] = dates[i];\n      sixMonthArr[j] = priceArr[i].toFixed(2);\n    }\n  }\n\n  sixMonthArr.reverse();\n  sixMonthDates.reverse();\n  finalData.labels = sixMonthDates;\n  finalData.datasets[0].data = sixMonthArr;\n  return finalData;\n};\n","// DateISOConver function convert time to ISO time.\n// It also accept one argument if user wants past month's ISO time\nexport default function DateISOConverter(...prevMonth) {\n  let ISOtime;\n\n  if (prevMonth.length === 0) {\n    ISOtime = new Date().toISOString();\n    return ISOtime;\n  } else if (prevMonth.length === 1) {\n    let currDate = new Date();\n    var m = currDate.getMonth();\n    currDate.setMonth(currDate.getMonth() - prevMonth);\n    // If still in same month, set date to last day of previous month\n    if (currDate.getMonth() === m) currDate.setDate(0);\n    currDate.setHours(0, 0, 0, 0);\n    // Get the time value in milliseconds and convert to seconds\n    let unixtstart = (currDate / 1000) | 0;\n    let preMonth = new Date(unixtstart * 1000);\n    ISOtime = new Date(preMonth).toISOString();\n    return ISOtime;\n  } else {\n    console.log(\"DateISOConverter function cannot accept more than 1 argument\");\n  }\n}\n","import \"./index.css\";\nimport React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Pricechart from \"./components/Pricechart\";\nimport { formatWeekData } from \"./formatWeekData\";\nimport { formatMonthData } from \"./formatMonthData\";\nimport { ThreeMonthformat } from \"./ThreeMonthformat\";\nimport { OneDayFormat } from \"./OneDayFormat\";\nimport { SixMonthFormat } from \"./SixMonthFormat\";\nimport DateISOConverter from \"./DateISOConverter\";\nimport { Line } from \"react-chartjs-2\";\n\nfunction App() {\n  const[time, setTime] = useState('');\n  const[chartLg, setChartLg] = useState({});\n  const [currencies, setcurrencies] = useState([]);\n  \n  //Chart 1 \n  const [pair1, setpair1] = useState(\"LTC-USD\");\n  const [price1, setprice1] = useState(\"0.00\");\n  const [pastData1, setpastData1] = useState([]);\n\n  //Chart 2\n  const [pair2, setpair2] = useState(\"ETH-USD\");\n  const [price2, setprice2] = useState(\"0.00\");\n  const [pastData2, setpastData2] = useState([])\n  //Chart 3\n  const [pair3, setpair3] = useState(\"BTC-USD\");\n  const [price3, setprice3] = useState(\"0.00\");\n  const [pastData3, setpastData3] = useState([]);\n\n  //so each chart can keep track of live time data\n  const ws1 = useRef(null);\n  const ws2 = useRef(null);\n  const ws3 = useRef(null);\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n  const opts = {\n    animation: {\n      duration: 0\n    },\n    tooltips: {\n      intersect: false,\n      mode: \"index\",\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n  };\n\n //populate cryptocurrency options in dropdown\n  useEffect(() => {\n    ws1.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n    ws2.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n    ws3.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n        .then((res) => res.json())\n        .then((data) => (pairs = data));\n\n      // Filter data by USD\n      let filtered = pairs.filter((pair) => {\n        if (pair.quote_currency === \"USD\") {\n          return pair;\n        }\n        return null;\n      });\n\n      // Filter base_currency in alphabetical order\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n        return 0;\n      });\n\n      // Change currencies useState\n      setcurrencies(filtered);\n\n      // keep track of current useEffect\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n\n  //chart1\n  useEffect(() => {\n    // if first useEffect is false then do nothing\n    if (!first.current) {\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair1],\n      channels: [\"ticker\"],\n    };\n\n    let jsonMsg = JSON.stringify(msg);\n\n    ws1.current.send(jsonMsg);\n\n    let historicalDataURL;\n    if (time === \"1d\") {\n      historicalDataURL = `${url}/products/${pair1}/candles?granularity=3600`;\n    } else if (time === \"6m\") {\n      // Returns current ISO time\n      let stop = DateISOConverter();\n      // Returns 6 month past ISO time\n      let start = DateISOConverter(6);\n      historicalDataURL = `${url}/products/${pair1}/candles?start=${start}&stop=${stop}&granularity=86400`;\n    } else {\n      historicalDataURL = `${url}/products/${pair1}/candles?granularity=86400`;\n    } \n\n    const fetchHistoricalData1 = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => {\n          dataArr = data;\n        });\n\n      let formattedData;\n      if (time === \"1d\") {\n        formattedData = OneDayFormat(dataArr, 1);\n      } else if (time === \"1w\") {\n        // formatWeekData funnction parse dataArr for week\n        formattedData = formatWeekData(dataArr, 1);\n      } else if (time === \"1m\") {\n        // formatMonthData function parse dataArr for 1 Month / 31 days\n        formattedData = formatMonthData(dataArr, 1);\n      } else if (time === \"3m\") {\n        formattedData = ThreeMonthformat(dataArr, 1);\n      } else if (time === \"6m\") {\n        formattedData = SixMonthFormat(dataArr, 1);\n      } else {\n        // by default\n        formattedData = formatWeekData(dataArr, 1);\n      }\n      setpastData1(formattedData);\n    };\n\n    fetchHistoricalData1();\n\n    ws1.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        // console.log(\"NON TICKER EVENT\", e);\n        return;\n      }\n\n      // Update the price / real time updates\n      if (data.product_id === pair1) {\n        // console.log(\"id matches\");\n        setprice1(data.price);\n      }\n    };\n  }, [time, pair1]);\n\n  const handleSelect1 = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair1],\n      channels: [\"ticker\"],\n    };\n\n    // When we change the option. This will unsubscribe the previous property\n    let unsub = JSON.stringify(unsubMsg);\n    ws1.current.send(unsub);\n\n    setpair1(e.target.value);\n  };\n\n  //chart2\n  useEffect(() => {\n    // if first useEffect is false then do nothing\n    if (!first.current) {\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair2],\n      channels: [\"ticker\"],\n    };\n\n    let jsonMsg = JSON.stringify(msg);\n\n    ws2.current.send(jsonMsg);\n\n    let historicalDataURL;\n    if (time === \"1d\") {\n      historicalDataURL = `${url}/products/${pair2}/candles?granularity=3600`;\n    } else if (time === \"6m\") {\n      // Returns current ISO time\n      let stop = DateISOConverter();\n      // Returns 6 month past ISO time\n      let start = DateISOConverter(6);\n\n      historicalDataURL = `${url}/products/${pair2}/candles?start=${start}&stop=${stop}&granularity=86400`;\n    } else {\n      historicalDataURL = `${url}/products/${pair2}/candles?granularity=86400`;\n    }\n\n    // console.log(historicalDataURL);\n    const fetchHistoricalData2 = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => {\n          dataArr = data;\n        });\n\n      let formattedData;\n      if (time === \"1d\") {\n        formattedData = OneDayFormat(dataArr, 2);\n      } else if (time === \"1w\") {\n        // formatWeekData funnction parse dataArr for week\n        formattedData = formatWeekData(dataArr, 2);\n      } else if (time === \"1m\") {\n        // formatMonthData function parse dataArr for 1 Month / 31 days\n        formattedData = formatMonthData(dataArr, 2);\n      } else if (time === \"3m\") {\n        formattedData = ThreeMonthformat(dataArr, 2);\n      } else if (time === \"6m\") {\n        formattedData = SixMonthFormat(dataArr, 2);\n      } else {\n        // by default\n        formattedData = formatWeekData(dataArr, 2);\n      }\n      setpastData2(formattedData);\n    };\n\n    fetchHistoricalData2();\n\n    ws2.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        // console.log(\"NON TICKER EVENT\", e);\n        return;\n      }\n\n      // Update the price / real time updates\n      if (data.product_id === pair2) {\n        // console.log(\"id matches\");\n        setprice2(data.price);\n      }\n    };\n  }, [time, pair2]);\n\n  const handleSelect2 = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair2],\n      channels: [\"ticker\"],\n    };\n\n    // When we change the option. This will unsubscribe the previous property\n    let unsub = JSON.stringify(unsubMsg);\n    ws2.current.send(unsub);\n\n    setpair2(e.target.value);\n  };\n\n  //chart3\n  useEffect(() => {\n    // if first useEffect is false then do nothing\n    if (!first.current) {\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair3],\n      channels: [\"ticker\"],\n    };\n\n    let jsonMsg = JSON.stringify(msg);\n\n    ws3.current.send(jsonMsg);\n\n    let historicalDataURL;\n    if (time === \"1d\") {\n      historicalDataURL = `${url}/products/${pair3}/candles?granularity=3600`;\n    } else if (time === \"6m\") {\n      // Returns current ISO time\n      let stop = DateISOConverter();\n      // Returns 6 month past ISO time\n      let start = DateISOConverter(6);\n\n      historicalDataURL = `${url}/products/${pair3}/candles?start=${start}&stop=${stop}&granularity=86400`;\n    } else {\n      historicalDataURL = `${url}/products/${pair3}/candles?granularity=86400`;\n    }\n\n    const fetchHistoricalData3 = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => {\n          dataArr = data;\n        });\n\n      let formattedData;\n      if (time === \"1d\") {\n        formattedData = OneDayFormat(dataArr, 3);\n      } else if (time === \"1w\") {\n        // formatWeekData funnction parse dataArr for week\n        formattedData = formatWeekData(dataArr, 3);\n      } else if (time === \"1m\") {\n        // formatMonthData function parse dataArr for 1 Month / 31 days\n        formattedData = formatMonthData(dataArr, 3);\n      } else if (time === \"3m\") {\n        formattedData = ThreeMonthformat(dataArr, 3);\n      } else if (time === \"6m\") {\n        formattedData = SixMonthFormat(dataArr, 3);\n      } else {\n        // by default\n        formattedData = formatWeekData(dataArr, 3);\n      }\n      setpastData3(formattedData);\n    };\n\n    fetchHistoricalData3();\n\n    ws3.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        // console.log(\"NON TICKER EVENT\", e);\n        return;\n      }\n\n      // Update the price / real time updates\n      if (data.product_id === pair3) {\n        // console.log(\"id matches\");\n        setprice3(data.price);\n      }\n    };\n  }, [time, pair3]);\n\n  const handleSelect3 = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair3],\n      channels: [\"ticker\"],\n    };\n\n    // When we change the option. This will unsubscribe the previous property\n    let unsub = JSON.stringify(unsubMsg);\n    ws3.current.send(unsub);\n\n    setpair3(e.target.value);\n  };\n\n  useEffect(() => {\n    let array1 = [];\n    let array2 = [];\n    let array3 = [];\n    if(typeof pastData1.datasets !== 'undefined')\n      {array1 = pastData1.datasets[0].data;}\n    if(typeof pastData2.datasets !== 'undefined')\n      {array2 = pastData2.datasets[0].data;}\n    if(typeof pastData3.datasets !== 'undefined')\n      {array3 = pastData3.datasets[0].data;}\n    let finalData = {\n      labels: pastData1.labels,\n      datasets: [\n      {\n        label: pair1 + \" Price\",\n        data: array1,\n        backgroundColor: \"rgb(57, 255, 20)\",\n        borderColor: \"rgba(57, 255, 20, 0.2)\",\n        fill: false,\n      },\n      {\n        label: pair2 + \" Price\",\n        data: array2,\n        backgroundColor: \"rgb(255, 163, 67)\",\n        borderColor: \"rgba(255, 163, 67, 0.2)\",\n        fill: false,\n      },\n      {\n        label: pair3 + \" Price\",\n        data: array3,\n        backgroundColor: \"rgb(254, 65, 100)\",\n        borderColor:  \"rgba(254, 65, 100, 0.2)\",\n        fill: false,\n      }]\n      };\n      setChartLg(finalData);\n  }, [pastData1, pastData2, pastData3, pair1, pair2, pair3]);\n\n  return (\n    <section className=\"grid-container mainChart\">\n      <div className=\"grid-item logo\">\n        <img src=\"logo.png\" alt=\"Logo\" height=\"50px\" width=\"50px\"></img>\n      </div>\n      <div id=\"lgChart\" className=\"grid-item lgChart\">\n        <Line data={chartLg} options={opts} />\n      </div>\n      <div className=\"grid-item timeFrames\">\n        <div className=\"buttons\">\n        <button onClick={(e) => setTime('1d')} type=\"button\" className=\"btn btn-primary\">1D</button>\n        <button onClick={(e) => setTime('1w')} type=\"button\" className=\"btn btn-primary\">1W</button>\n        <button onClick={(e) => setTime('1m')} type=\"button\" className=\"btn btn-primary\">1M</button>\n        <button onClick={(e) => setTime('3m')} type=\"button\" className=\"btn btn-primary\">3M</button>\n        <button onClick={(e) => setTime('6m')} type=\"button\" className=\"btn btn-primary\">6M</button>\n        </div>\n      </div>\n      <div id=\"smChart1\" className=\"grid-item smChart1\">\n        <Pricechart price={price1} data={pastData1} />\n        <select name=\"currency\" value={pair1} onChange={handleSelect1}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div id=\"smChart2\" className=\"grid-item smChart2\">\n        <Pricechart price={price2} data={pastData2} />\n        <select name=\"currency\" value={pair2} onChange={handleSelect2}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div id=\"smChart3\" className=\"grid-item smChart3\">\n        <Pricechart price={price3} data={pastData3} />\n        <select name=\"currency\" value={pair3} onChange={handleSelect3}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}